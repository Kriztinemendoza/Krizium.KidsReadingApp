@page "/settings/api"
@using Microsoft.Extensions.Logging;
@using Krizium.KidsReadingApp.Maui.Services.Logging
@using Krizium.KidsReadingApp.Maui.Services
@inject AppConfigService ConfigService
@inject NetworkService NetworkService
@inject ILogger<ApiSettings> Logger

<div class="settings-page">
    <h1>API Settings</h1>
    
    <div class="connection-status @(isConnected ? "connected" : "disconnected")">
        <span class="status-indicator"></span>
        <span class="status-text">@(isConnected ? "Connected" : "Disconnected")</span>
        <button @onclick="CheckConnection" class="check-button">
            Check Connection
        </button>
    </div>
    
    <div class="settings-form">
        <div class="form-group">
            <label for="apiUrl">API URL</label>
            <div class="input-group">
                <input id="apiUrl" type="text" @bind="apiUrl" />
                <button @onclick="SaveApiUrl" disabled="@isSaving" class="save-button">
                    @if (isSaving)
                    {
                        <span class="spinner-small"></span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
            </div>
            @if (!string.IsNullOrEmpty(apiUrlError))
            {
                <div class="error-message">@apiUrlError</div>
            }
        </div>
        
        <div class="form-group">
            <label>Storage Priority</label>
            <div class="toggle-group">
                <label class="toggle">
                    <input type="checkbox" @bind="useLocalStorageFirst" />
                    <span class="toggle-slider"></span>
                </label>
                <span>Use local storage first when available</span>
            </div>
        </div>
        
        <div class="form-group">
            <label for="wordCacheLimit">Word Cache Limit</label>
            <input id="wordCacheLimit" type="number" min="0" @bind="wordCacheLimit" />
            <small>Maximum number of words to cache for offline use</small>
        </div>
        
        <div class="form-group">
            <label for="maxOfflineBooks">Max Offline Books</label>
            <input id="maxOfflineBooks" type="number" min="0" @bind="maxOfflineBooks" />
            <small>Maximum number of books to store offline</small>
        </div>
        
        <div class="actions">
            <button @onclick="SaveSettings" disabled="@isSaving" class="primary-button">
                @if (isSaving)
                {
                    <span class="spinner-small"></span>
                }
                else
                {
                    <span>Save All Settings</span>
                }
            </button>
            <button @onclick="ResetSettings" class="secondary-button">
                Reset to Defaults
            </button>
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message @(isError ? "error" : "success")">
            @statusMessage
        </div>
    }
</div>

@code {
    private string apiUrl = "";
    private bool useLocalStorageFirst = false;
    private int wordCacheLimit = 1000;
    private int maxOfflineBooks = 10;
    
    private bool isConnected = false;
    private bool isSaving = false;
    private string statusMessage = "";
    private bool isError = false;
    private string apiUrlError = "";
    
    protected override async Task OnInitializedAsync()
    {
        // Load current settings
        apiUrl = ConfigService.ApiBaseUrl;
        useLocalStorageFirst = ConfigService.UseLocalStorageFirst;
        wordCacheLimit = ConfigService.OfflineWordCacheLimit;
        maxOfflineBooks = ConfigService.MaxOfflineBooks;
        
        // Check connection
        isConnected = await NetworkService.CheckConnectivityAsync();
        
        // Subscribe to connectivity changes
        NetworkService.ConnectivityChanged += OnConnectivityChanged;
    }
    
    private void OnConnectivityChanged(object sender, bool connected)
    {
        isConnected = connected;
        StateHasChanged();
    }
    
    private async Task CheckConnection()
    {
        isConnected = await NetworkService.CheckConnectivityAsync();
    }
    
    private async Task SaveApiUrl()
    {
        if (string.IsNullOrWhiteSpace(apiUrl))
        {
            apiUrlError = "API URL cannot be empty";
            return;
        }
        
        if (!Uri.TryCreate(apiUrl, UriKind.Absolute, out _))
        {
            apiUrlError = "Invalid URL format";
            return;
        }
        
        apiUrlError = "";
        await SaveSetting(() => ConfigService.UpdateApiUrlAsync(apiUrl));
    }
    
    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            statusMessage = "";
            isError = false;
            StateHasChanged();
            
            if (string.IsNullOrWhiteSpace(apiUrl))
            {
                apiUrlError = "API URL cannot be empty";
                isError = true;
                return;
            }
            
            if (!Uri.TryCreate(apiUrl, UriKind.Absolute, out _))
            {
                apiUrlError = "Invalid URL format";
                isError = true;
                return;
            }
            
            apiUrlError = "";
            
            await ConfigService.UpdateApiUrlAsync(apiUrl);
            await ConfigService.SetUseLocalStorageFirstAsync(useLocalStorageFirst);
            await ConfigService.SetOfflineWordCacheLimitAsync(wordCacheLimit);
            await ConfigService.SetMaxOfflineBooksAsync(maxOfflineBooks);
            
            statusMessage = "Settings saved successfully";
            isError = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving settings");
            statusMessage = $"Error saving settings: {ex.Message}";
            isError = true;
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private async Task SaveSetting(Func<Task> saveAction)
    {
        try
        {
            isSaving = true;
            statusMessage = "";
            isError = false;
            StateHasChanged();
            
            await saveAction();
            
            statusMessage = "Setting saved successfully";
            isError = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving setting");
            statusMessage = $"Error saving setting: {ex.Message}";
            isError = true;
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void ResetSettings()
    {
        apiUrl = "https://api.kidsreadingapp.com/api";
        useLocalStorageFirst = false;
        wordCacheLimit = 1000;
        maxOfflineBooks = 10;
        apiUrlError = "";
        statusMessage = "Settings reset to defaults (not saved)";
        isError = false;
    }
    
    public void Dispose()
    {
        // Unsubscribe from connectivity changes
        NetworkService.ConnectivityChanged -= OnConnectivityChanged;
    }
}

<style>
    .settings-page {
        padding: 16px;
        max-width: 800px;
        margin: 0 auto;
    }
    
    h1 {
        color: #4a6ea9;
        margin-bottom: 20px;
    }
    
    .connection-status {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        padding: 10px;
        border-radius: 4px;
        background-color: #f8f9fa;
    }
    
    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 10px;
    }
    
    .connection-status.connected .status-indicator {
        background-color: #28a745;
    }
    
    .connection-status.disconnected .status-indicator {
        background-color: #dc3545;
    }
    
    .status-text {
        font-weight: 500;
        margin-right: auto;
    }
    
    .check-button {
        padding: 6px 12px;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .settings-form {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 6px;
        font-weight: 500;
    }
    
    .form-group small {
        display: block;
        color: #6c757d;
        margin-top: 4px;
    }
    
    .input-group {
        display: flex;
    }
    
    .input-group input {
        flex: 1;
        margin-right: 10px;
    }
    
    input[type="text"], input[type="number"] {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        width: 100%;
    }
    
    .toggle-group {
        display: flex;
        align-items: center;
    }
    
    .toggle {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
        margin-right: 10px;
    }
    
    .toggle input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    
    .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 24px;
    }
    
    .toggle-slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
        background-color: #4a6ea9;
    }
    
    input:checked + .toggle-slider:before {
        transform: translateX(26px);
    }
    
    .save-button {
        padding: 8px 16px;
        background-color: #4a6ea9;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .save-button:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }
    
    .actions {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }
    
    .primary-button {
        padding: 10px 20px;
        background-color: #4a6ea9;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .primary-button:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }
    
    .secondary-button {
        padding: 10px 20px;
        background-color: #f8f9fa;
        color: #212529;
        border: 1px solid #ced4da;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .error-message {
        color: #dc3545;
        margin-top: 4px;
        font-size: 14px;
    }
    
    .status-message {
        margin-top: 20px;
        padding: 10px;
        border-radius: 4px;
    }
    
    .status-message.success {
        background-color: #d4edda;
        color: #155724;
    }
    
    .status-message.error {
        background-color: #f8d7da;
        color: #721c24;
    }
    
    .spinner-small {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s linear infinite;
    }
    
</style>