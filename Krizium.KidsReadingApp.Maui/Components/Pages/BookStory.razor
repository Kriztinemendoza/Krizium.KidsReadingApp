@page "/book-story/{BookId:int}/page/{PageNumber:int}"
@using Krizium.KidsReadingApp.Core.Models
@using Krizium.KidsReadingApp.Core.Interfaces
@using Krizium.KidsReadingApp.Maui.Services
@using Microsoft.JSInterop
@using System.Threading
@inject BookLibraryDataService BookService
@inject ITtsService TtsService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="reading-container">
    @if (isLoading)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Loading your story...</p>
        </div>
    }
    else if (currentPage != null)
    {
        <div class="book-header">
            <h1>@bookTitle</h1>
            <div class="page-controls">
                @if (PageNumber > 1)
                {
                    <button @onclick="GoToPreviousPage" class="nav-button">
                        <span class="oi oi-arrow-left"></span> Previous
                    </button>
                }
                
                <span class="page-number">Page @PageNumber</span>
                
                @if (hasNextPage)
                {
                    <button @onclick="GoToNextPage" class="nav-button">
                        Next <span class="oi oi-arrow-right"></span>
                    </button>
                }
            </div>
        </div>

        <div class="story-container">
            @if (!string.IsNullOrEmpty(currentPage.ImageUrl))
            {
                <div class="page-image">
                    <img src="@currentPage.ImageUrl" alt="Illustration for page @PageNumber" />
                </div>
            }

            <div class="page-text">
                @foreach (var paragraph in currentPage.Paragraphs)
                {
                    <p class="paragraph">
                        @foreach (var word in paragraph.Words)
                        {
                            <span 
                                @key="word.Id" 
                                class="word @(currentWordId == word.Id ? "highlight" : "")" 
                                @onclick="() => SpeakWordAsync(word)">
                                @word.Text
                            </span>
                        }
                    </p>
                }
            </div>
        </div>

        <div class="action-buttons">
            <button @onclick="ToggleListenMode" class="listen-button @(isReading ? "stop" : "")">
                @(isReading ? "Stop Reading" : "Listen to Page")
            </button>
        </div>
    }
    else
    {
        <div class="error-message">
            <h2>Oops!</h2>
            <p>We couldn't find this page. Let's go back to the book list.</p>
            <button @onclick="GoToBookList" class="nav-button">Book List</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public int BookId { get; set; }

    [Parameter]
    public int PageNumber { get; set; }

    private Page currentPage;
    private Krizium.KidsReadingApp.Core.Models.Book currentBook;
    private string bookTitle = "Reading Book";
    private bool isLoading = true;
    private bool isReading = false;
    private bool hasNextPage = false;
    private int currentWordId = 0;
    private CancellationTokenSource readingCts;

    protected override async Task OnInitializedAsync()
    {
        readingCts = new CancellationTokenSource();
        await LoadPageAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (currentPage == null || currentPage.PageNumber != PageNumber || currentBook?.Id != BookId)
        {
            await LoadPageAsync();
        }
    }

    private async Task LoadPageAsync()
    {
        try
        {
            isLoading = true;
            StopReading();
            
            // Load the book data
            currentBook = await BookService.GetBookByIdAsync(BookId);
            
            if (currentBook != null)
            {
                bookTitle = currentBook.Title;
                
                // Load the current page
                currentPage = await BookService.GetBookPageAsync(BookId, PageNumber);
                
                // Check if there's a next page
                hasNextPage = currentBook.Pages.Any(p => p.PageNumber > PageNumber);
            }
            // else
            // {
            //     // Try to load from offline storage
            //     var offlineBooks = await BookService.GetOfflineBooksAsync();
            //     currentBook = offlineBooks.FirstOrDefault(b => b.Id == BookId);
                
            //     if (currentBook != null)
            //     {
            //         bookTitle = currentBook.Title;
            //         currentPage = await BookService.GetOfflineBookPageAsync(BookId, PageNumber);
                    
            //         // For offline, we use metadata to determine if there's a next page
            //         var bookMetadata = await GetBookMetadataAsync(BookId);
            //         hasNextPage = bookMetadata != null && PageNumber < bookMetadata.PageCount;
            //     }
            // }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading page: {ex.Message}");
            currentPage = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // private async Task<BookMetadata> GetBookMetadataAsync(int bookId)
    // {
    //     try
    //     {
    //         var bookDirectory = await BookService.GetBookContentPathAsync(bookId);
    //         var metadataPath = Path.Combine(bookDirectory, "metadata.json");
            
    //         if (File.Exists(metadataPath))
    //         {
    //             var json = await File.ReadAllTextAsync(metadataPath);
    //             return System.Text.Json.JsonSerializer.Deserialize<BookMetadata>(json);
    //         }
            
    //         return null;
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error getting book metadata: {ex.Message}");
    //         return null;
    //     }
    // }

    private async Task SpeakWordAsync(Word word)
    {
        if (word == null || string.IsNullOrWhiteSpace(word.Text)) return;
        
        // Stop any ongoing speech
        TtsService.CancelSpeech();
        
        // Highlight the current word
        currentWordId = word.Id;
        StateHasChanged();
        
        // Speak the word using the TTS service
        await TtsService.SpeakWordAsync(word.Text, 1.0f, 1.0f, 0.9f);
        
        // Remove highlight after a short delay
        await Task.Delay(300);
        currentWordId = 0;
        StateHasChanged();
    }

    private async Task ToggleListenMode()
    {
        if (isReading)
        {
            StopReading();
        }
        else
        {
            await StartReadingAsync();
        }
    }

    private async Task StartReadingAsync()
    {
        if (currentPage == null || currentPage.Paragraphs == null || isReading) return;
        
        try
        {
            isReading = true;
            StateHasChanged();
            
            // Cancel any existing reading task
            if (readingCts != null)
            {
                readingCts.Cancel();
                readingCts.Dispose();
            }
            
            readingCts = new CancellationTokenSource();
            
            // Read each paragraph, word by word
            foreach (var paragraph in currentPage.Paragraphs)
            {
                foreach (var word in paragraph.Words)
                {
                    // Check if reading has been cancelled
                    if (readingCts.Token.IsCancellationRequested)
                    {
                        return;
                    }
                    
                    // Update the highlighted word
                    currentWordId = word.Id;
                    StateHasChanged();
                    
                    // Speak the word
                    await TtsService.SpeakWordAsync(word.Text, 1.0f, 1.0f, 0.9f);
                    
                    // Brief pause between words
                    await Task.Delay(100, readingCts.Token);
                }
                
                // Longer pause between paragraphs
                await Task.Delay(500, readingCts.Token);
            }
        }
        catch (OperationCanceledException)
        {
            // Reading was cancelled, which is expected behavior
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in reading: {ex.Message}");
        }
        finally
        {
            isReading = false;
            currentWordId = 0;
            StateHasChanged();
        }
    }

    private void StopReading()
    {
        if (isReading && readingCts != null)
        {
            readingCts.Cancel();
            TtsService.CancelSpeech();
            isReading = false;
            currentWordId = 0;
            StateHasChanged();
        }
    }

    private void GoToPreviousPage()
    {
        if (PageNumber > 1)
        {
            NavManager.NavigateTo($"/book/{BookId}/page/{PageNumber - 1}");
        }
    }

    private void GoToNextPage()
    {
        if (hasNextPage)
        {
            NavManager.NavigateTo($"/book/{BookId}/page/{PageNumber + 1}");
        }
    }

    private void GoToBookList()
    {
        NavManager.NavigateTo("/books");
    }

    public void Dispose()
    {
        StopReading();
        readingCts?.Dispose();
    }
}

<style>
    .reading-container {
        font-family: 'ComicNeue', 'Comic Sans MS', cursive, sans-serif;
        padding: 16px;
        display: flex;
        flex-direction: column;
        height: 100%;
        background-color: #f8f9fa;
    }

    .book-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 16px;
    }

    .book-header h1 {
        color: #4a6ea9;
        font-size: 28px;
        margin: 8px 0;
        text-align: center;
        font-family: 'ComicNeueBold', 'Comic Sans MS', cursive, sans-serif;
    }

    .page-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding: 8px 0;
    }

    .nav-button {
        background-color: #4a6ea9;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .nav-button:hover {
        background-color: #3d5a8a;
    }

    .page-number {
        font-weight: bold;
        color: #333;
    }

    .story-container {
        flex: 1;
        background-color: white;
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        overflow-y: auto;
        margin-bottom: 16px;
    }

    .page-image {
        text-align: center;
        margin-bottom: 20px;
    }

    .page-image img {
        max-width: 100%;
        max-height: 300px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .page-text {
        font-size: 24px;
        line-height: 1.6;
        color: #333;
    }

    .paragraph {
        margin-bottom: 20px;
    }

    .word {
        display: inline-block;
        cursor: pointer;
        padding: 2px 1px;
        margin: 0 1px;
        border-bottom: 2px solid transparent;
        transition: all 0.2s;
    }

    .word:hover {
        color: #4a6ea9;
        border-bottom: 2px solid #4a6ea9;
    }

    .word.highlight {
        background-color: #ffeb3b;
        border-radius: 4px;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        margin-top: 8px;
    }

    .listen-button {
        background-color: #4a6ea9;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 30px;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .listen-button:hover {
        background-color: #3d5a8a;
    }

    .listen-button.stop {
        background-color: #e74c3c;
    }

    .listen-button.stop:hover {
        background-color: #c0392b;
    }

    .loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 300px;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border-left-color: #4a6ea9;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    
</style>